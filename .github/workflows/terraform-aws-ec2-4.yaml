# Deploy yaml typically has 5 points in place: event, job, runner, steps, configF

# Update in infrastructure
name: "Terraform Pipeline Provision EC2"

on:
  push:
    branches: 
      - docker
  pull_request:
    branches: 
      - docker

env:
  TF_LOG: INFO
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  TF_CLOUD_ORGANIZATION: "rakul_org"
  # TF_WORKSPACE: "GreenSync-IAT"
  TF_TOKEN_app_terraform_io: ${{ secrets.TF_API_TOKEN }}
  TFE_TOKEN: ${{ secrets.TF_API_TOKEN }}
  CONFIG_DIRECTORY: "./deployments/terraform/terraform-aws-ec2-tf/terraform/"
  # TERRAFORM_CLI_PATH: "/usr/local/bin/terraform"  # Ensuring correct Terraform binary path

jobs:
  terraform:
    name: "Terraform Pipeline Provision EC2 with TF Cloud"
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ./deployments/terraform/terraform-aws-ec2-tf/terraform

    steps:
      - name: Checkout the repository to the runner
        uses: actions/checkout@v3

      - name: Setup Terraform with specified version on the runner
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.0

      # - name: Manually Set Terraform API Token
      #   run: |
      #     export TF_TOKEN_app_terraform_io=${{ secrets.TF_API_TOKEN }}
      #     export TFE_TOKEN=${{ secrets.TF_API_TOKEN }}
      #     echo "TF_TOKEN_app_terraform_io=${{ secrets.TF_API_TOKEN }}" >> $GITHUB_ENV
      #     echo "TFE_TOKEN=${{ secrets.TF_API_TOKEN }}" >> $GITHUB_ENV

      # - name: Verify Terraform Cloud Authentication
      #   run: |
      #     curl -H "Authorization: Bearer ${{ secrets.TF_API_TOKEN }}" https://app.terraform.io/api/v2/account/details || exit 1

      - name: Remove Existing Terraform State
        run: rm -rf .terraform

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Format
        id: fmt
        run: terraform fmt

      - name: Terraform Validate
        id: validate
        run: terraform validate

      - name: Terraform Plan
        id: plan
        run: terraform plan -input=false -target=aws_instance.django_e2e

      - name: Terraform Apply
        run: terraform apply -input=false
